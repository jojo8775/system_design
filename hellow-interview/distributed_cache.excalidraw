{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "LgSp6jfxyv4QnL6SDclg3",
      "type": "text",
      "x": 2046.012752154004,
      "y": 2985.3872277029864,
      "width": 288.5757141113281,
      "height": 216,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3b",
      "roundness": null,
      "seed": 1263647181,
      "version": 404,
      "versionNonce": 118705816,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1737850089174,
      "link": null,
      "locked": false,
      "text": "Functional Req: \n- Insert an entry in the Cache\n- should be able to assign a TTL \n- Get an entry from the cache if present \n- should be able to delete a key\n\nNon-Functional Req \n- Available > consistency \n- Low latency (< 10 ms)\n- scalable (100 k rps )",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Functional Req: \n- Insert an entry in the Cache\n- should be able to assign a TTL \n- Get an entry from the cache if present \n- should be able to delete a key\n\nNon-Functional Req \n- Available > consistency \n- Low latency (< 10 ms)\n- scalable (100 k rps )",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "_VfpmU4NoqlON-gKQ2dlU",
      "type": "text",
      "x": 2060.0140082858325,
      "y": 3260.4562851873893,
      "width": 60.143957018852234,
      "height": 64.80000000000001,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3c",
      "roundness": null,
      "seed": 791604035,
      "version": 120,
      "versionNonce": 562071272,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1737850089174,
      "link": null,
      "locked": false,
      "text": "Entity \n- Keys\n- Values",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Entity \n- Keys\n- Values",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "3bMcHjFXA40AV0MESbUam",
      "type": "text",
      "x": 2059.2214843538422,
      "y": 3373.3072281792456,
      "width": 309.34369218349457,
      "height": 345.6,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3d",
      "roundness": null,
      "seed": 915072451,
      "version": 385,
      "versionNonce": 433961880,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1737850089174,
      "link": null,
      "locked": false,
      "text": "Api\n1. Insert \n\n[post] v1/ insert => success / failure \nrequest body => {\n   - key\n   - value\n}\n\n2. Get \n\n[get] v1/get/key => value if present or null.\n\n3. Delete \n\n[delete] v1/get/key => http response. ",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Api\n1. Insert \n\n[post] v1/ insert => success / failure \nrequest body => {\n   - key\n   - value\n}\n\n2. Get \n\n[get] v1/get/key => value if present or null.\n\n3. Delete \n\n[delete] v1/get/key => http response. ",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "YnXDAJbEEBDfWnENzIkn2",
      "type": "text",
      "x": 2503.3734763050734,
      "y": 3006.28661678982,
      "width": 937.1514892578125,
      "height": 216,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3e",
      "roundness": null,
      "seed": 1985824835,
      "version": 804,
      "versionNonce": 981206760,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1737850827399,
      "link": null,
      "locked": false,
      "text": "High Level \n\n1. How to perform the Add, Get, Delete and eviction of Cache \n- Consider it is a single node, we can use LRU cache which has O(1) for all the operation \n\n2.How to apply TTL?\n- Consider using a timestamp to be stored as a part of the value. If the request Time exceeds the value then the result will be null \n- We can delete the entry as soon as we detect the stored timestamp has exceeded the request time \n- for the left out keys, LRU will eventually override those keys. Cron job can be used to delete those keys as well\n",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "High Level \n\n1. How to perform the Add, Get, Delete and eviction of Cache \n- Consider it is a single node, we can use LRU cache which has O(1) for all the operation \n\n2.How to apply TTL?\n- Consider using a timestamp to be stored as a part of the value. If the request Time exceeds the value then the result will be null \n- We can delete the entry as soon as we detect the stored timestamp has exceeded the request time \n- for the left out keys, LRU will eventually override those keys. Cron job can be used to delete those keys as well\n",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "hAmnRIvNESR-9zCDm3ETD",
      "type": "text",
      "x": 2492.276061346984,
      "y": 3269.4703152794855,
      "width": 1043.1513671875,
      "height": 648,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3f",
      "roundness": null,
      "seed": 1928085005,
      "version": 2755,
      "versionNonce": 1700158360,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1737851206447,
      "link": null,
      "locked": false,
      "text": "DeepDive \n\n1. How to ensure  cache is highly Available? \n- Replication of node. Replication will solve the read scalability but write will suffer \n- with replication, updating an entry needs to propage the changes to all the nodes \n- Async replication can be performed - this provides us to implement a heatly quorum \n- Peer to Peer - this ensures max scalability but it is hard to implement and all the nodes need to know the destination of other node.\n\n2. How to ensure the cache is scalable? \n\n- Replication wil improve availability but of the data becomes too much for a single server we to shard \n- Sharding based on consistent hashing to ensure we can add and remove servers based on the laod with minimal ket remapping \n\n\n3, How to handle hot key? \n\n(1)Read heavy hot key: \n-  replication helps with this issue, but it comes with a cost. Not all the keys in a shard are hot and replicating the entire shard is waste. \n- detecting the hot key and then replicating it with a suffix is another alternative. However, if this keys write heavy as well it makes update slow. \nthis is because all the replication needs to be updated for maintaining consistency \n\n(2) Write heady hot key: \n- Batching the update helps but then it reduces the freshness of the cache. \n\n(b) - this works for data which can be calculated for instance Counter\n- this approach write the hot key with a suffix (partition number) to even spread the load.\n- During read, the read performs a fan out read to all the shards and then aggregate the data to form the original data. \n- Challenges: (a)Works for only certain kind of data. (b) consistency is hard to obtain as each partitions are getting a write. \n\n",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "DeepDive \n\n1. How to ensure  cache is highly Available? \n- Replication of node. Replication will solve the read scalability but write will suffer \n- with replication, updating an entry needs to propage the changes to all the nodes \n- Async replication can be performed - this provides us to implement a heatly quorum \n- Peer to Peer - this ensures max scalability but it is hard to implement and all the nodes need to know the destination of other node.\n\n2. How to ensure the cache is scalable? \n\n- Replication wil improve availability but of the data becomes too much for a single server we to shard \n- Sharding based on consistent hashing to ensure we can add and remove servers based on the laod with minimal ket remapping \n\n\n3, How to handle hot key? \n\n(1)Read heavy hot key: \n-  replication helps with this issue, but it comes with a cost. Not all the keys in a shard are hot and replicating the entire shard is waste. \n- detecting the hot key and then replicating it with a suffix is another alternative. However, if this keys write heavy as well it makes update slow. \nthis is because all the replication needs to be updated for maintaining consistency \n\n(2) Write heady hot key: \n- Batching the update helps but then it reduces the freshness of the cache. \n\n(b) - this works for data which can be calculated for instance Counter\n- this approach write the hot key with a suffix (partition number) to even spread the load.\n- During read, the read performs a fan out read to all the shards and then aggregate the data to form the original data. \n- Challenges: (a)Works for only certain kind of data. (b) consistency is hard to obtain as each partitions are getting a write. \n\n",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "hGSPXGonUxMWzRtRPTdfl",
      "type": "rectangle",
      "x": 2283.892697766119,
      "y": 3995.756602941116,
      "width": 107.79296875,
      "height": 42.2265625,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3g",
      "roundness": {
        "type": 3
      },
      "seed": 585407896,
      "version": 147,
      "versionNonce": 1293738904,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "2RjvMZxKyJsFN6PTuCH2R"
        },
        {
          "id": "7LtptD_5RkNgisz6kUs-m",
          "type": "arrow"
        }
      ],
      "updated": 1737851215473,
      "link": null,
      "locked": false
    },
    {
      "id": "2RjvMZxKyJsFN6PTuCH2R",
      "type": "text",
      "x": 2317.645203306967,
      "y": 4006.0698841911158,
      "width": 40.28795766830444,
      "height": 21.6,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3h",
      "roundness": null,
      "seed": 1414213096,
      "version": 90,
      "versionNonce": 1944891544,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737851215473,
      "link": null,
      "locked": false,
      "text": "client",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "hGSPXGonUxMWzRtRPTdfl",
      "originalText": "client",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "TES4cGttfNOswibaIH0qr",
      "type": "rectangle",
      "x": 2545.955197766119,
      "y": 3931.350352941116,
      "width": 74.40625000000001,
      "height": 186.3125,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3i",
      "roundness": {
        "type": 3
      },
      "seed": 1541711512,
      "version": 145,
      "versionNonce": 1312516760,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "c6I_1S6j45QzHB0-I788h"
        },
        {
          "id": "7LtptD_5RkNgisz6kUs-m",
          "type": "arrow"
        },
        {
          "id": "LkHTNZOp0SB9EH6a2oUnI",
          "type": "arrow"
        }
      ],
      "updated": 1737851215473,
      "link": null,
      "locked": false
    },
    {
      "id": "c6I_1S6j45QzHB0-I788h",
      "type": "text",
      "x": 2550.6943412569103,
      "y": 4002.906602941116,
      "width": 64.92796301841736,
      "height": 43.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3j",
      "roundness": null,
      "seed": 1516459928,
      "version": 121,
      "versionNonce": 2107791256,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737851215473,
      "link": null,
      "locked": false,
      "text": "API\nGateway",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "TES4cGttfNOswibaIH0qr",
      "originalText": "API Gateway",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "G9Ae2fFy3Rm-pn7VTYxgu",
      "type": "rectangle",
      "x": 2771.236447766119,
      "y": 3987.280040441116,
      "width": 186.453125,
      "height": 69.47265625,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3k",
      "roundness": {
        "type": 3
      },
      "seed": 1839749096,
      "version": 164,
      "versionNonce": 1137008280,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "3NDvRWSy3ZOIoZRXtAvMd"
        },
        {
          "id": "LkHTNZOp0SB9EH6a2oUnI",
          "type": "arrow"
        }
      ],
      "updated": 1737851215473,
      "link": null,
      "locked": false
    },
    {
      "id": "3NDvRWSy3ZOIoZRXtAvMd",
      "type": "text",
      "x": 2842.215028360182,
      "y": 4011.2163685661158,
      "width": 44.49596381187439,
      "height": 21.6,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3kV",
      "roundness": null,
      "seed": 644759784,
      "version": 91,
      "versionNonce": 365808536,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737851215473,
      "link": null,
      "locked": false,
      "text": "Cache",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "G9Ae2fFy3Rm-pn7VTYxgu",
      "originalText": "Cache",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "7LtptD_5RkNgisz6kUs-m",
      "type": "arrow",
      "x": 2392.716916516119,
      "y": 4017.190196691116,
      "width": 156.890625,
      "height": 0.4609375,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3m",
      "roundness": {
        "type": 2
      },
      "seed": 898811032,
      "version": 299,
      "versionNonce": 2021337320,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737851215474,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          156.890625,
          -0.4609375
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "hGSPXGonUxMWzRtRPTdfl",
        "focus": 0.02264460945152134,
        "gap": 1.03125,
        "fixedPoint": null
      },
      "endBinding": {
        "elementId": "TES4cGttfNOswibaIH0qr",
        "focus": 0.08444612532060769,
        "gap": 1,
        "fixedPoint": null
      },
      "startArrowhead": "arrow",
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "LkHTNZOp0SB9EH6a2oUnI",
      "type": "arrow",
      "x": 2622.439572766119,
      "y": 4018.424571691116,
      "width": 153.47265625,
      "height": 1.79296875,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3n",
      "roundness": {
        "type": 2
      },
      "seed": 1145150872,
      "version": 288,
      "versionNonce": 2116292328,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737851215474,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          153.47265625,
          -1.79296875
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "TES4cGttfNOswibaIH0qr",
        "focus": -0.0600819407244119,
        "gap": 2.078125,
        "fixedPoint": null
      },
      "endBinding": {
        "elementId": "G9Ae2fFy3Rm-pn7VTYxgu",
        "focus": 0.17918189522404146,
        "gap": 1,
        "fixedPoint": null
      },
      "startArrowhead": "arrow",
      "endArrowhead": "arrow",
      "elbowed": false
    },
    {
      "id": "LfpzlcdL8Fp2bEOb4wv6x",
      "type": "text",
      "x": 2657.334104016119,
      "y": 3936.268321691116,
      "width": 340.71968019008636,
      "height": 43.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3o",
      "roundness": null,
      "seed": 1942669720,
      "version": 245,
      "versionNonce": 1101339112,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737851218558,
      "link": null,
      "locked": false,
      "text": "Logic: LRU cache with o(1) for insert/get/delete\ntimestamp: for TTL ",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Logic: LRU cache with o(1) for insert/get/delete\ntimestamp: for TTL ",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "i6EDEpkzzbdPoWaLzxkQU",
      "type": "text",
      "x": 2838.388791516119,
      "y": 4087.0904652458034,
      "width": 453.8716125488281,
      "height": 43.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "b3p",
      "roundness": null,
      "seed": 455265432,
      "version": 168,
      "versionNonce": 1295945368,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737851274305,
      "link": null,
      "locked": false,
      "text": "Async Replication: to provide low latency and high Availability \nSharding by key: to obtain scalability (use consistent hashing)",
      "fontSize": 16,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Async Replication: to provide low latency and high Availability \nSharding by key: to obtain scalability (use consistent hashing)",
      "autoResize": true,
      "lineHeight": 1.35
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}